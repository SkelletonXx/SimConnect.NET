<Project>
  <PropertyGroup>
  <Version>0.1.5-beta</Version>
    <Authors>BARS</Authors>
    <Company>BARS</Company>
    <Product>SimConnect.NET</Product>
    <Description>A managed C# wrapper for Microsoft Flight Simulator's SimConnect SDK, providing async/await patterns and high-level abstractions for flight simulation data access.</Description>
    <Copyright>Copyright (c) BARS. All rights reserved.</Copyright>
    <RepositoryUrl>https://github.com/stopbars/SimConnect.NET</RepositoryUrl>
    <RepositoryType>git</RepositoryType>
    <PackageProjectUrl>https://github.com/stopbars/SimConnect.NET</PackageProjectUrl>
    <PackageReadmeFile>README.nuget.md</PackageReadmeFile>
    <PackageLicenseExpression>MIT</PackageLicenseExpression>
    <PackageTags>flight-simulator;simconnect;msfs;flight-sim;aviation;simulation</PackageTags>
    <PackageReleaseNotes>See CHANGELOG.md for details.</PackageReleaseNotes>
    <PackageIcon Condition="Exists('$(MSBuildThisFileDirectory)logo.png')">logo.png</PackageIcon>
    <PublishRepositoryUrl>true</PublishRepositoryUrl>
    <EmbedUntrackedSources>true</EmbedUntrackedSources>
    <IncludeSymbols>true</IncludeSymbols>
    <SymbolPackageFormat>snupkg</SymbolPackageFormat>
    <LangVersion>latest</LangVersion>
    <Nullable>enable</Nullable>
    <TreatWarningsAsErrors>true</TreatWarningsAsErrors>
    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
    <GenerateDocumentationFile>true</GenerateDocumentationFile>
    <Deterministic>true</Deterministic>
    <ContinuousIntegrationBuild Condition="'$(CI)' == 'true'">true</ContinuousIntegrationBuild>
  </PropertyGroup>

  <!-- Security and signing -->
  <PropertyGroup>
    <SignAssembly>false</SignAssembly>
    <DelaySign>false</DelaySign>
    <PublicSign>false</PublicSign>
  </PropertyGroup>

  <!-- Package content -->
  <ItemGroup>
    <None Include="$(MSBuildThisFileDirectory)README.nuget.md" Pack="true" PackagePath="\" />
    <None Include="$(MSBuildThisFileDirectory)LICENCE" Pack="true" PackagePath="\" />
    <None Include="$(MSBuildThisFileDirectory)CHANGELOG.md" Pack="true" PackagePath="\" />
    <None Include="$(MSBuildThisFileDirectory)SECURITY.md" Pack="true" PackagePath="\" />
    <None Include="$(MSBuildThisFileDirectory)logo.png" Pack="true" PackagePath="\" Condition="Exists('$(MSBuildThisFileDirectory)logo.png')" />
  </ItemGroup>

  <!-- StyleCop configuration -->
  <ItemGroup>
    <PackageReference Include="StyleCop.Analyzers" Version="1.2.0-beta.435" PrivateAssets="all" />
    <PackageReference Include="Microsoft.SourceLink.GitHub" Version="8.0.0" PrivateAssets="All" />
  </ItemGroup>

  <ItemGroup Condition="'$(ContinuousIntegrationBuild)' == 'true'">
    <SourceRoot Include="$(MSBuildThisFileDirectory)/" />
  </ItemGroup>

  <!-- Global analyzer config -->
  <ItemGroup>
    <AdditionalFiles Include="$(MSBuildThisFileDirectory)stylecop.json" Link="stylecop.json" />
  </ItemGroup>

  <!-- Auto-derive package release notes from CHANGELOG.md -->
  <Target Name="DerivePackageReleaseNotes" BeforeTargets="GenerateNuspec">
    <ReadLinesFromFile File="$(MSBuildThisFileDirectory)CHANGELOG.md">
      <Output TaskParameter="Lines" ItemName="ChangelogLines" />
    </ReadLinesFromFile>

    <ItemGroup>
      <_FirstVersionHeader Include="@(ChangelogLines)"
                           Condition="$([System.Text.RegularExpressions.Regex]::IsMatch('%(ChangelogLines.Identity)', '^(##\s+\[?\d+\.\d+\.\d+.*)'))" />
    </ItemGroup>

    <PropertyGroup>
      <_FirstVersionHeaderLine>@(_FirstVersionHeader->'%(Identity)')</_FirstVersionHeaderLine>
      <PackageReleaseNotes Condition=" '$(PackageReleaseNotes)' == '' ">See CHANGELOG.md for details.</PackageReleaseNotes>
    </PropertyGroup>

    <UsingTask TaskName="_ExtractReleaseNotes" TaskFactory="CodeTaskFactory" AssemblyName="Microsoft.Build.Tasks.Core">
      <ParameterGroup>
        <Lines ParameterType="System.String[]" Required="true" />
        <Result Output="true" ParameterType="System.String" />
      </ParameterGroup>
      <Task>
        <Reference Include="System.Core" />
        <Code Type="Fragment" Language="cs"><![CDATA[
          // Regex matches version headers like: ## 1.2.3, ## [1.2.3], ## [1.2.3-beta] - 2025-08-09
          var headerRegex = new System.Text.RegularExpressions.Regex(@"^##\s+\[?\d+\.\d+\.\d+.*");
          bool inBlock = false;
          var sb = new System.Text.StringBuilder();
          foreach (var line in Lines)
          {
            if (headerRegex.IsMatch(line))
            {
              if (inBlock) break; // reached next version header
              inBlock = true;
            }
            if (inBlock) sb.AppendLine(line);
          }
          var text = sb.ToString().Trim();
          // Sanity: avoid empty overwrite
          Result = string.IsNullOrWhiteSpace(text) ? null : text;
        ]]></Code>
      </Task>
    </UsingTask>

    <_ExtractReleaseNotes Lines="@(ChangelogLines)">
      <Output TaskParameter="Result" PropertyName="_DerivedReleaseNotes" />
    </_ExtractReleaseNotes>

    <PropertyGroup Condition=" '$(_DerivedReleaseNotes)' != '' ">
      <PackageReleaseNotes>$(_DerivedReleaseNotes)</PackageReleaseNotes>
    </PropertyGroup>

    <Message Importance="High" Text="[DerivePackageReleaseNotes] Using auto-derived notes: $([System.String]::Copy('$(PackageReleaseNotes)'))" Condition=" '$(_DerivedReleaseNotes)' != '' " />
    <Message Importance="Low" Text="[DerivePackageReleaseNotes] Auto-derivation skipped (fallback retained)." Condition=" '$(_DerivedReleaseNotes)' == '' " />
  </Target>
</Project>
