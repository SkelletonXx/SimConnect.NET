<Project>
  <PropertyGroup>
  <Version>0.1.6-beta</Version>
    <Authors>BARS</Authors>
    <Company>BARS</Company>
    <Product>SimConnect.NET</Product>
    <Description>A managed C# wrapper for Microsoft Flight Simulator's SimConnect SDK, providing async/await patterns and high-level abstractions for flight simulation data access.</Description>
    <Copyright>Copyright (c) BARS. All rights reserved.</Copyright>
    <RepositoryUrl>https://github.com/stopbars/SimConnect.NET</RepositoryUrl>
    <RepositoryType>git</RepositoryType>
    <PackageProjectUrl>https://github.com/stopbars/SimConnect.NET</PackageProjectUrl>
    <PackageReadmeFile>README.nuget.md</PackageReadmeFile>
    <PackageLicenseExpression>MIT</PackageLicenseExpression>
    <PackageTags>flight-simulator;simconnect;msfs;flight-sim;aviation;simulation</PackageTags>
    <PackageReleaseNotes>See CHANGELOG.md for details.</PackageReleaseNotes>
    <PackageIcon Condition="Exists('$(MSBuildThisFileDirectory)logo.png')">logo.png</PackageIcon>
    <PublishRepositoryUrl>true</PublishRepositoryUrl>
    <EmbedUntrackedSources>true</EmbedUntrackedSources>
    <IncludeSymbols>true</IncludeSymbols>
    <SymbolPackageFormat>snupkg</SymbolPackageFormat>
    <LangVersion>latest</LangVersion>
    <Nullable>enable</Nullable>
    <TreatWarningsAsErrors>true</TreatWarningsAsErrors>
    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
    <GenerateDocumentationFile>true</GenerateDocumentationFile>
    <Deterministic>true</Deterministic>
    <ContinuousIntegrationBuild Condition="'$(CI)' == 'true'">true</ContinuousIntegrationBuild>
  </PropertyGroup>

  <!-- Security and signing -->
  <PropertyGroup>
    <SignAssembly>false</SignAssembly>
    <DelaySign>false</DelaySign>
    <PublicSign>false</PublicSign>
  </PropertyGroup>

  <!-- Package content -->
  <ItemGroup>
    <None Include="$(MSBuildThisFileDirectory)README.nuget.md" Pack="true" PackagePath="\" />
    <None Include="$(MSBuildThisFileDirectory)LICENCE" Pack="true" PackagePath="\" />
    <None Include="$(MSBuildThisFileDirectory)CHANGELOG.md" Pack="true" PackagePath="\" />
    <None Include="$(MSBuildThisFileDirectory)SECURITY.md" Pack="true" PackagePath="\" />
    <None Include="$(MSBuildThisFileDirectory)logo.png" Pack="true" PackagePath="\" Condition="Exists('$(MSBuildThisFileDirectory)logo.png')" />
  </ItemGroup>

  <!-- StyleCop configuration -->
  <ItemGroup>
    <PackageReference Include="StyleCop.Analyzers" Version="1.2.0-beta.435" PrivateAssets="all" />
    <PackageReference Include="Microsoft.SourceLink.GitHub" Version="8.0.0" PrivateAssets="All" />
  </ItemGroup>

  <ItemGroup Condition="'$(ContinuousIntegrationBuild)' == 'true'">
    <SourceRoot Include="$(MSBuildThisFileDirectory)/" />
  </ItemGroup>

  <!-- Global analyzer config -->
  <ItemGroup>
    <AdditionalFiles Include="$(MSBuildThisFileDirectory)stylecop.json" Link="stylecop.json" />
  </ItemGroup>

  <!-- Auto-derive package release notes from CHANGELOG.md -->
  <Target Name="DerivePackageReleaseNotes" BeforeTargets="GenerateNuspec" Condition="Exists('$(MSBuildThisFileDirectory)CHANGELOG.md')">
    <ReadLinesFromFile File="$(MSBuildThisFileDirectory)CHANGELOG.md">
      <Output TaskParameter="Lines" ItemName="ChangelogLines" />
    </ReadLinesFromFile>

    <!-- Create a temporary PowerShell script file -->
    <PropertyGroup>
      <_TempScriptPath>$(MSBuildThisFileDirectory)temp_extract_changelog.ps1</_TempScriptPath>
    </PropertyGroup>

    <WriteLinesToFile File="$(_TempScriptPath)" Lines="
      param($version, $changelogPath)
      $content = Get-Content $changelogPath -Raw
      $pattern = '(?ms)^##\s+\[' + [regex]::Escape($version) + '\].*?(?=^##\s+\[|\z)'
      $match = [regex]::Match($content, $pattern)
      if ($match.Success) {
        $lines = $match.Value -split '\r?\n'
        $contentLines = $lines | Where-Object { $_ -notmatch '^##\s+\[.*\]' -and $_ -match '\S' } | Select-Object -First 15
        $result = $contentLines -join [Environment]::NewLine
        if ($result.Trim()) {
          Write-Output $result.Trim()
        } else {
          Write-Output 'See CHANGELOG.md for details.'
        }
      } else {
        Write-Output 'See CHANGELOG.md for details.'
      }
      " Overwrite="true" />

    <!-- Execute the PowerShell script -->
    <Exec Command="powershell -ExecutionPolicy Bypass -File &quot;$(_TempScriptPath)&quot; &quot;$(Version)&quot; &quot;$(MSBuildThisFileDirectory)CHANGELOG.md&quot;" ConsoleToMSBuild="true" IgnoreExitCode="true">
      <Output TaskParameter="ConsoleOutput" PropertyName="_ExtractedNotes" />
    </Exec>

    <!-- Clean up the temporary script -->
    <Delete Files="$(_TempScriptPath)" />

    <!-- Set the package release notes -->
    <PropertyGroup>
      <PackageReleaseNotes>$(_ExtractedNotes)</PackageReleaseNotes>
      <PackageReleaseNotes Condition="'$(PackageReleaseNotes)' == ''">See CHANGELOG.md for details.</PackageReleaseNotes>
    </PropertyGroup>

    <Message Importance="High" Text="[DerivePackageReleaseNotes] Extracted release notes for version $(Version): $(PackageReleaseNotes)" />
  </Target>
</Project>
